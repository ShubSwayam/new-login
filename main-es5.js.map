{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","HomeComponent","validatingForm","signupFormModalName","required","signupFormModalEmail","email","signupFormModalPassword","get","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'shubblog';\n}\n","<app-home></app-home>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\n\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MDBBootstrapModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  validatingForm: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.validatingForm = new FormGroup({\n      signupFormModalName: new FormControl('', Validators.required),\n      signupFormModalEmail: new FormControl('', Validators.email),\n      signupFormModalPassword: new FormControl('', Validators.required),\n    });\n  }\n\n\n  get signupFormModalName() {\n    return this.validatingForm.get('signupFormModalName');\n  }\n\n  get signupFormModalEmail() {\n    return this.validatingForm.get('signupFormModalEmail');\n  }\n\n  get signupFormModalPassword() {\n    return this.validatingForm.get('signupFormModalPassword');\n  }\n\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Shubham Sharma - Home</title>\n</head>\n\n<body>\n    <div class=\"row\">\n        <!-- <div class=\"container\"> -->\n            <div class=\"col-md-6\">\n                <!-- <button type=\"button\" mdbBtn color=\"default\" rounded=\"true\" data-toggle=\"modal\"\n                    data-target=\"#basicExample\" (click)=\"frame.show()\" mdbWavesEffect>Launch Modal\n                </button> -->\n\n                <div mdbModal #frame=\"mdbModal\" class=\"modal fade left\" id=\"frameModalTop\" tabindex=\"-1\" role=\"dialog\"\n                    aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                    <div class=\"modal-dialog\" role=\"document\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header text-center\">\n                                <h4 class=\"modal-title w-100 font-weight-bold\">Sign up</h4>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\n                                    (click)=\"frame.hide()\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div class=\"modal-body mx-3\">\n                                <div class=\"md-form mb-5\">\n                                    <mdb-icon fas icon=\"user\" class=\"prefix grey-text\"></mdb-icon>\n                                    <input type=\"text\" id=\"orangeForm-name\" class=\"form-control\"\n                                        [formControl]=\"signupFormModalName\" mdbInput mdbValidate>\n                                    <label for=\"orangeForm-name\">Your name</label>\n                                    <mdb-error\n                                        *ngIf=\"signupFormModalName.invalid && (signupFormModalName.dirty || signupFormModalName.touched)\">\n                                        Input invalid\n                                    </mdb-error>\n                                    <mdb-success\n                                        *ngIf=\"signupFormModalName.valid && (signupFormModalName.dirty || signupFormModalName.touched)\">\n                                        Input valid\n                                    </mdb-success>\n                                </div>\n                                <div class=\"md-form mb-5\">\n                                    <mdb-icon fas icon=\"envelope\" class=\"prefix grey-text\"></mdb-icon>\n                                    <input type=\"email\" id=\"orangeForm-email\" class=\"form-control\"\n                                        [formControl]=\"signupFormModalEmail\" mdbInput mdbValidate>\n                                    <label for=\"orangeForm-email\">Your email</label>\n                                    <mdb-error\n                                        *ngIf=\"signupFormModalEmail.invalid && (signupFormModalEmail.dirty || signupFormModalEmail.touched)\">\n                                        Input\n                                        invalid\n                                    </mdb-error>\n                                    <mdb-success\n                                        *ngIf=\"signupFormModalEmail.valid && (signupFormModalEmail.dirty || signupFormModalEmail.touched)\">\n                                        Input\n                                        valid\n                                    </mdb-success>\n                                </div>\n\n                                <div class=\"md-form mb-4\">\n                                    <mdb-icon fas icon=\"lock\" class=\"prefix grey-text\"></mdb-icon>\n                                    <input type=\"password\" id=\"orangeForm-pass\" class=\"form-control\"\n                                        [formControl]=\"signupFormModalPassword\" mdbInput mdbValidate>\n                                    <label for=\"orangeForm-pass\">Your password</label>\n                                    <mdb-error\n                                        *ngIf=\"signupFormModalPassword.invalid && (signupFormModalPassword.dirty || signupFormModalPassword.touched)\">\n                                        Input invalid\n                                    </mdb-error>\n                                    <mdb-success\n                                        *ngIf=\"signupFormModalPassword.valid && (signupFormModalPassword.dirty || signupFormModalPassword.touched)\">\n                                        Input valid\n                                    </mdb-success>\n                                </div>\n\n                            </div>\n                            <div class=\"modal-footer d-flex justify-content-center\">\n                                <button mdbBtn color=\"deep-orange\" class=\"waves-light\" mdbWavesEffect>Sign up</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\" style=\"margin-top:5%\">\n                <!-- Default form login -->\n                <form class=\"text-center border border-light p-5\">\n\n                    <p class=\"h4 mb-4\">Sign in</p>\n\n                    <!-- Email -->\n                    <input type=\"email\" id=\"defaultLoginFormEmail\" class=\"form-control mb-4\" placeholder=\"E-mail\">\n\n                    <!-- Password -->\n                    <input type=\"password\" id=\"defaultLoginFormPassword\" class=\"form-control mb-4\"\n                        placeholder=\"Password\">\n\n                    <div class=\"d-flex justify-content-around\">\n                        <div>\n                            <!-- Remember me -->\n                            <mdb-checkbox  [default]=\"true\">Remember me</mdb-checkbox>\n                        </div>\n                        <div>\n                            <!-- Forgot password -->\n                            <a href=\"\">Forgot password?</a>\n                        </div>\n                    </div>\n\n                    <!-- Sign in button -->\n                    <button mdbBtn color=\"info\" block=\"true\" class=\"my-4\" type=\"submit\">Sign in</button>\n\n                    <!-- Register -->\n                    <p>Not a member?\n                        <a mdbBtn color=\"default\" rounded=\"true\" data-toggle=\"modal\"\n                        data-target=\"#basicExample\" (click)=\"frame.show()\" mdbWavesEffect>Register</a>\n                    </p>\n\n                    <!-- Social login -->\n                    <p>or sign in with:</p>\n\n                    <a type=\"button\" class=\"light-blue-text mx-2\">\n                        <mdb-icon fab icon=\"facebook\"></mdb-icon>\n                    </a>\n                    <a type=\"button\" class=\"light-blue-text mx-2\">\n                        <mdb-icon fab icon=\"twitter\"></mdb-icon>\n                    </a>\n                    <a type=\"button\" class=\"light-blue-text mx-2\">\n                        <mdb-icon fab icon=\"linkedin\"></mdb-icon>\n                    </a>\n                    <a type=\"button\" class=\"light-blue-text mx-2\">\n                        <mdb-icon fab icon=\"github\"></mdb-icon>\n                    </a>\n\n                </form>\n                <!-- Default form login -->\n            </div>\n        <!-- </div> -->\n    </div>\n</body>\n\n</html>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}